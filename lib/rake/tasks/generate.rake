# encoding: utf-8
require 'settingslogic'
require 'active_support/core_ext/string'

desc 'generator utils'
namespace :g do
  namespace :script do
    class DBConfig < Settingslogic
      source "#{Dir.pwd}/config/database.yaml"
      namespace 'production'
    end

    namespace :backup do
      desc 'generate mysql backup script'
      task :mysql_and_redis do
        backup_script = <<-EOF.strip_heredoc
          #!/usr/bin/env bash
          #
          # function: backup mysql with crontab
          # author: jay@16/04/24
          #
          # ps: automatic generated by lib/tasks/g.rake#generator:script:backup_mysql_and_redis

          cd #{Dir.pwd} || exit

          [[ -d db/backup ]] || mkdir -p db/backup
          timestamp=$(date "+%y%m%d%H%M%S")

          # backup mysql
          backup_data_path="db/backup/#{DBConfig.database}_${timestamp}.sql"
          mysqldump -h#{DBConfig.host} -u#{DBConfig.username} -p#{DBConfig.password} #{DBConfig.database} $(mysql -h#{DBConfig.host} -u#{DBConfig.username} -p#{DBConfig.password} -D#{DBConfig.database} -Bse"show tables like 'sys_%'") | gzip > ${backup_data_path}.gz

          backup_fupr_path="db/backup/#{DBConfig.database}_dR_${timestamp}.sql"
          mysqldump -h#{DBConfig.host} -u#{DBConfig.username} -p#{DBConfig.password} -d -R #{DBConfig.database} | gzip > ${backup_fupr_path}.gz
          echo "$(date): backup ${backup_fupr_path}.gz $([[ $? -eq 0 ]] && echo 'successfully' || echo 'failed')"

          # backup redis
          redis_dump_path="db/redis_dump.rdb"
          backup_dump_path="db/backup/redis_dump_${timestamp}.rdb"

          /usr/local/bin/redis-cli bgsave
          echo "$(date): redis save $([[ $? -eq 0 ]] && echo 'successfully' || echo 'failed')"

          sleep 10s && cp ${redis_dump_path} ${backup_dump_path}
          echo "$(date): redis backup $([[ $? -eq 0 ]] && echo 'successfully' || echo 'failed')"

          # 清理符合如下条件的文件:
          #   1. project/db/backup/ 文件夹下
          #   2. 普通文件类型
          #   3. 文件名后缀为.gz | .rdb
          #   4. 修改时间在30天以前
          find db/backup/ -type f -name '*.gz' -mtime +30 -exec rm -f {} \\;
          find db/backup/ -type f -name '*.rdb' -mtime +30 -exec rm -f {} \\;
        EOF

        File.open('db/backup.sh', 'w:utf-8') { |file| file.puts(backup_script) }
      end

      desc 'generate scp server db backup script'
      task :scp do
        backup_script = <<-EOF.strip_heredoc
          #!/usr/bin/env bash
          #
          # function: scp server db backup and import database
          # author: jay@16/08/17
          #
          # ps: automatic generated by lib/tasks/g.rake#generator:script:scp_backup

          cd #{Dir.pwd} || exit
          [[ -d db/backup ]] || mkdir -p db/backup
          timestamp=$(date "+%y%m%d")

          scp db/backup/*${timestamp}*.sql.gz bi@yonghui-test.idata.mobi:/home/work/shengyiplus-server/db/backup
        EOF

        File.open('db/scp.sh', 'w:utf-8') { |file| file.puts(backup_script) }
      end

      desc 'generate backup logs script'
      task :log do
        backup_script = <<-EOF.strip_heredoc
          #!/usr/bin/env bash
          #
          # function: backup log files with crontab
          # author: jay@16/10/15

          cd #{Dir.pwd} || exit

          timestamp=$(date "+%y%m%d")
          archived_path="log/archived/${timestamp}"
          [[ -d ${archived_path} ]] || mkdir -p ${archived_path}

          # backup
          cp -r log/{*.log,crontab} ${archived_path}
          echo "$(date): cp -r log/{*.log,crontab} $([[ $? -eq 0 ]] && echo 'successfully' || echo 'failed')"

          # clean old logs
          ls log/*.log | xargs -I logpath cp /dev/null logpath
          echo "$(date): clean log/*.log $([[ $? -eq 0 ]] && echo 'successfully' || echo 'failed')"
          rm -f log/crontab/*
          echo "$(date): rm -f log/crontab/* $([[ $? -eq 0 ]] && echo 'successfully' || echo 'failed')"
         EOF

        File.open('log/backup.sh', 'w:utf-8') { |file| file.puts(backup_script) }
      end
    end
  end
end
